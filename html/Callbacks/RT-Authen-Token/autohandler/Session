<%ARGS>
$user => ''
$pass => ''
</%ARGS>
<%INIT>
return if RT::Interface::Web::_UserLoggedIn();
return unless defined $pass;

my ($user_id, $cleartext_token) = RT::AuthToken->ParseAuthString($pass);
return unless $user_id;

my $user_obj = RT::CurrentUser->new;
$user_obj->Load($user_id);
return if !$user_obj->Id || $user_obj->Disabled;

if (length $user) {
    my $check_user = RT::CurrentUser->new;
    $check_user->Load($user);
    return unless $check_user->Id && $user_obj->Id == $check_user->Id;
}

my $tokens = RT::AuthTokens->new(RT->SystemUser);
$tokens->LimitOwner(VALUE => $user_id);
while (my $token = $tokens->Next) {
    if ($token->IsToken($cleartext_token)) {
        $token->UpdateLastUsed;

        # log in
        my $remote_addr = RT::Interface::Web::RequestENV('REMOTE_ADDR');
        $RT::Logger->info("Successful login for @{[$user_obj->Name]} from $remote_addr using authentication token #@{[$token->Id]} (\"@{[$token->Description]}\")");

        # It's important to nab the next page from the session before we blow
        # the session away
        my $next = RT::Interface::Web::RemoveNextPage($ARGS{'next'});
           $next = $next->{'url'} if ref $next;

        RT::Interface::Web::InstantiateNewSession();
        $session{'CurrentUser'} = $user_obj;

        # Really the only time we don't want to redirect here is if we were
        # passed user and pass as query params in the URL.
        if ($next) {
            RT::Interface::Web::Redirect($next);
        }
        elsif ($ARGS{'next'}) {
            # Invalid hash, but still wants to go somewhere, take them to /
            RT::Interface::Web::Redirect(RT->Config->Get('WebURL'));
        }

        return;
    }
}
</%INIT>
